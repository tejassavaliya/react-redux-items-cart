{"version":3,"sources":["containers/AddItem.js","actions/index.js","containers/ItemList.js","components/App.js","reportWebVitals.js","reducers/itemsReducer.js","reducers/index.js","store.js","index.js"],"names":["connect","dispatch","useState","inputValue","setInputValue","handleAddButtonClick","newItem","itemName","quantity","isSelected","trim","type","payload","className","value","onKeyPress","event","keyCode","which","enterPressed","onChange","target","placeholder","icon","faPlus","onClick","state","items","data","myTotalCount","map","item","index","faTimes","deleteItem","removeItem","faChevronLeft","decrementItemQuantity","handleQuantityDecrease","faChevronRight","incrementItemQuantity","handleQuantityIncrease","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","calculateTotal","reduce","total","itemReducer","action","newItems2","filter","newItems","newItems1","allReducers","combineReducers","itemsReducer","store","createStore","allReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bf8d605.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { addItem } from '../actions';\r\nimport './AddItem.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { connect } from 'react-redux';\r\n\r\nconst AddItem = ({ dispatch }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleAddButtonClick = () => {\r\n\t\tconst newItem = {\r\n\t\t\titemName: inputValue,\r\n\t\t\tquantity: 1,\r\n\t\t\tisSelected: false,\r\n\t\t};\r\n        if(inputValue.trim() !== '') {\r\n            dispatch(addItem(newItem))\r\n        }\r\n        setInputValue('');\r\n    };\r\n\r\n    const enterPressed = (event) => {\r\n        var code = event.keyCode || event.which;\r\n        if(code === 13) { \r\n            handleAddButtonClick();\r\n        } \r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div className='add-item-box'>\r\n                <input value={inputValue} onKeyPress={(event) => enterPressed(event)} onChange={(event) => setInputValue(event.target.value)} className='add-item-input' placeholder='Add an item...' />\r\n                <FontAwesomeIcon icon={faPlus} onClick={() => handleAddButtonClick()} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default connect()(AddItem);","export const addItem = (item) => {\r\n    return {\r\n        type: 'ADD_ITEM',\r\n        payload: item\r\n    }\r\n}\r\n\r\nexport const deleteItem = (index) => {\r\n    return {\r\n        type: 'REMOVE_ITEM',\r\n        index: index\r\n    }\r\n}\r\n\r\nexport const incrementItemQuantity = (index) => {\r\n    return {\r\n        type: 'INCREMENT_ITEM_QUANTITY',\r\n        index: index\r\n    }\r\n}\r\n\r\nexport const decrementItemQuantity = (index) => {\r\n    return {\r\n        type: 'DECREMENT_ITEM_QUANTITY',\r\n        index: index\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { deleteItem, decrementItemQuantity, incrementItemQuantity  } from '../actions';\r\nimport './ItemList.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes, faChevronLeft, faChevronRight} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ItemList = ({ items, myTotalCount, dispatch }) => {\r\n\r\n    const handleQuantityIncrease = (index) => {\r\n        dispatch(incrementItemQuantity(index))\r\n\t};\r\n\r\n\tconst handleQuantityDecrease = (index) => {\r\n        dispatch(decrementItemQuantity(index));\r\n\t};\r\n    const removeItem = (index) => {\r\n        dispatch(deleteItem(index));\r\n    }\r\n   \r\n    return (\r\n        <>\r\n            <div className='item-list'>\r\n                {items.map((item, index) => (\r\n                    <div className='item-container' key={index}>\r\n                        <div className='item-name'>\r\n                            <FontAwesomeIcon icon={faTimes} onClick={() => removeItem(index)} />\r\n                            <span>{item.itemName}</span>\r\n                        </div>\r\n                        <div className='quantity'>\r\n                            <button>\r\n                                <FontAwesomeIcon icon={faChevronLeft} onClick={() => handleQuantityDecrease(index)} />\r\n                            </button>\r\n                            <span> {item.quantity} </span>\r\n                            <button>\r\n                                <FontAwesomeIcon icon={faChevronRight} onClick={() => handleQuantityIncrease(index)} />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            {\r\n                (items && items.length) ? (\r\n                <div className='total'>Total: {myTotalCount}</div>\r\n                ) : ''\r\n            }\r\n            \r\n        </>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    items: state.data.items,\r\n    myTotalCount: state.data.myTotalCount\r\n})\r\nexport default connect(mapStateToProps)(ItemList);\r\n","// import React from 'react';\r\nimport React from 'react';\r\nimport AddItem from '../containers/AddItem';\r\nimport ItemList from '../containers/ItemList';\r\nimport '../index.css';\r\n\r\n\r\nconst App = () => {\r\n\t\r\n\treturn (\r\n\t\t<div className='app-background'>\r\n\t\t\t<div className='main-container'>\r\n\t\t\t\t<AddItem />\r\n\t\t\t\t<ItemList />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    items: [],\r\n    myTotalCount: 0\r\n}\r\nconst itemReducer = ( state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n        case 'ADD_ITEM':\r\n            return {\r\n                ...state,\r\n                items: [...state.items, action.payload],\r\n                myTotalCount: state.myTotalCount+1\r\n            } \r\n        case 'REMOVE_ITEM':\r\n            let newItems2 = [\r\n                ...state.items.filter((item, index) => index !== action.index)\r\n            ];\r\n            return {\r\n                items: newItems2,\r\n                myTotalCount: calculateTotal(newItems2)\r\n            }\r\n        case 'INCREMENT_ITEM_QUANTITY':\r\n            let newItems = [...state.items];\r\n            // if(newItems[action.index].quantity > 1) {\r\n                newItems[action.index].quantity++;\r\n            // }\r\n            return {\r\n                items: [...newItems],\r\n                myTotalCount: calculateTotal(newItems)\r\n            }\r\n        case 'DECREMENT_ITEM_QUANTITY':\r\n            let newItems1 = [...state.items];\r\n            if(newItems1[action.index].quantity > 1) {\r\n                newItems1[action.index].quantity--;\r\n            }\r\n            return {\r\n                items: [...newItems1],\r\n                myTotalCount: calculateTotal(newItems1)\r\n            };\r\n        default:\r\n            return state;    \r\n    }\r\n}\r\n\r\nconst calculateTotal = (items) => {\r\n    let newItems = [...items];\r\n    return newItems.reduce((total, item) => {\r\n        return total + item.quantity;\r\n    }, 0);\r\n}\r\n\r\n\r\nexport default itemReducer;","import itemsReducer from './itemsReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n    data: itemsReducer\r\n});\r\n\r\nexport default allReducers;","import { createStore } from 'redux';\r\nimport allReducer from './reducers';\r\n\r\nconst store = createStore(\r\n    allReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}